# coding: utf-8

from django.contrib.auth.models import User
from django.test import TestCase

from tasks.models import Task, TaskHistory, Nudge

class TestTask(TestCase):
    fixtures = ['test_tasks.json']
    
    def setUp(self):
        self.task = Task.objects.get(pk__exact=1)
        self.other_task = Task.objects.get(pk__exact=2)
        self.user_admin = User.objects.get(username__exact='admin')
        self.user_joe = User.objects.get(username__exact='joe')
        
        self.task_nudge_count = 2
        self.other_task_nudge_count = 1       
    
    def tearDown(self):
        pass
    
    def test_allowable_states(self):
        """Doing some simple assertions based off states"""
        
        # TODO: Add more state checks
        
        # Task is just created
        states = self.task.allowable_states(self.user_admin)
        self.assertEquals(states,
            [('1', 'leave open'), ('5', 'discussion needed'), ('6', 'blocked')])
        
        # Now we assign it. This is what the new user sees
        self.task.assignee = self.user_joe
        self.task.save(user=self.user_admin)
        states = self.task.allowable_states(self.user_joe)
        self.assertEquals(states,
            [('1', 'leave open'), ('2', 'resolved'), ('4', 'in progress'),
            ('5', 'discussion needed'), ('6', 'blocked')])
        
        # this is what the creator sees
        states = self.task.allowable_states(self.user_admin)
        self.assertEquals(states, [('1', 'leave open')])
        
        # Task is now moved to in-progress. this is what the assignee can see.
        self.task.state = "4"
        self.task.save(user=self.user_joe)
        states = self.task.allowable_states(self.user_joe)
        self.assertEquals(states,
            [('4', 'still in progress'), ('1', 'open'), ('2', 'resolved'),
            ('5', 'discussion needed'), ('6', 'blocked')])
            
    def test_denudge(self):
        """ We check that:
            1. We have nudges across multiple tasks.
            2. After denudging the task, the task has no more nudges
            3. After denudging the task, the other task still has nudges
        """            
        
        # we have nudges across multiple tasks including our sample task
        self.assertEquals(len(self.task.task_nudge.all()), self.task_nudge_count)
        self.assertEquals(len(self.other_task.task_nudge.all()), self.other_task_nudge_count)        
        
        # now we denudge our task
        self.task.denudge()
        
        # Our task should have no nudges
        self.assertEquals(len(self.task.task_nudge.all()), 0)
        
        # The other task should have its original number of nudges
        self.assertEquals(len(self.other_task.task_nudge.all()), self.other_task_nudge_count)                
            

class TestTaskHistory(TestCase):
    fixtures = ['test_tasks.json']
    
    def setUp(self):
        self.task = Task.objects.get(pk__exact=1)
        self.user_admin = User.objects.get(username__exact='admin')
        self.user_joe = User.objects.get(username__exact='joe')
    
    def tearDown(self):
        pass
    
    def test_history(self):
        """ lets see if history tracks user changes if done against the task"""
        
        # we have admin assign joe to the task.
        self.task.assignee = self.user_joe
        self.task.save(user=self.user_admin)
        
        # fetch the history
        history = self.task.history_task.all()[0]
        
        # The task assignee should be joe
        self.assertEquals(history.assignee, self.user_joe)
        
        # the person who made the change was admin
        self.assertEquals(history.owner, self.user_admin)
    
    def test_comment_history(self) :
        """ Now we examine histories generated by comments"""
        """Member users should be able to edit tasks"""
        
        # TODO: get this to freaking work!
        #self.client.login(username='admin', password='test')
        #response = self.client.get('/tasks/task/1/')